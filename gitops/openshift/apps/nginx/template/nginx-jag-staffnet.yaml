kind: Template
apiVersion: v1
metadata:
  name: ${COMPONENT_NAME}
  description: Deployment template for the ${COMPONENT_NAME}

labels:
  app: ${APP_NAME}
  app.kubernetes.io/name: ${COMPONENT_NAME}
  app.openshift.io/runtime: ${RUNTIME}

parameters:

  - name: APP_NAME
    description: The application name that each component is part of
    required: false
    value: jag-staffnet

  - name: COMPONENT_NAME
    description: The application name that each component is part of
    required: false
    value: nginx-jag-staffnet

  - name: OC_NAMESPACE
    description: The OpenShift namespace prefix
    required: false
    # Below value must be changed as per gold cluster oc nameplate
    value: c5fb6c

  - name: OC_ENV
    description: The OpenShift environment, ie dev, test or prod
    required: true

  - name: RUNTIME
    description: The application name that each component is part of
    required: false
    value: nginx

  - name: ENDPOINT1
    description: The target endpoint
    required: false
    value: jag-staffnet-biometrics

  - name: ENDPOINT2
    description: The target endpoint
    required: false
    value: jag-staffnet-identity-provisioning

  - name: DNS
    description: The nginx router url
    required: true

  - name: SSL_Certificate
    description: SSL application certificate
    required: false
    value: ''

  - name: SSL_PrivateKey
    description: Private key for the SSL application certificate
    required: false
    value: ''

  - name: CA_CertificateChain
    description: CA certificate chain for the SSL application certificate
    required: false
    value: ''

objects:

  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${COMPONENT_NAME}-conf
      namespace: ${OC_NAMESPACE}-${OC_ENV}

    data:
      nginx-proxy.conf: |-
        location /nginx-health {
        return 200 "Application is healthy";
        access_log off;
        }

        location = /api {
          return 302 /api/actuator/health;
        }

        location /healthcheck {
          default_type application/json;
          return 200 '{"status":"UP","groups":["liveness","readiness"]}';
          access_log off;
        }

        location /api/biometrics {
          client_max_body_size 100m;
          proxy_read_timeout 240s;
          proxy_send_timeout 80s;
          proxy_redirect off;
          port_in_redirect off;
          proxy_http_version 1.1;
          proxy_set_header Host $host;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Host $server_name;
          proxy_pass_request_headers on;
          proxy_pass http://splitter-biometrics/biometrics;
        }

        location /api/identity-provisioning {
          client_max_body_size 100m;
          proxy_read_timeout 240s;
          proxy_send_timeout 80s;
          proxy_redirect off;
          port_in_redirect off;
          proxy_http_version 1.1;
          proxy_set_header Host $host;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Host $server_name;
          proxy_pass_request_headers on;
          proxy_pass http://splitter-identity-provisioning/identity-provisioning;
        }

  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${COMPONENT_NAME}-upstream
      namespace: ${OC_NAMESPACE}-${OC_ENV}
    data:
      nginx-upstream.conf: |-
        upstream splitter-biometrics {
          server jag-staffnet-biometrics;
        }

        upstream splitter-identity-provisioning {
          server jag-staffnet-identity-provisioning;
        }

  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      name: ${COMPONENT_NAME}
      namespace: ${OC_NAMESPACE}-${OC_ENV}
      annotations:
        app.openshift.io/connects-to: ${ENDPOINT1}, ${ENDPOINT2}, ${ENDPOINT3}
    spec:
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
        resources: {}
        activeDeadlineSeconds: 21600
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${COMPONENT_NAME}
            from:
              kind: ImageStreamTag
              namespace: ${OC_NAMESPACE}-tools
              name: '${COMPONENT_NAME}:latest'
        - type: ConfigChange
      replicas: 1
      revisionHistoryLimit: 10
      test: false
      selector:
        name: ${COMPONENT_NAME}
        deploymentconfig: ${COMPONENT_NAME}
      template:
        metadata:
          labels:
            name: ${COMPONENT_NAME}
            deploymentconfig: ${COMPONENT_NAME}
        spec:
          volumes:
            - name: ${COMPONENT_NAME}-conf
              configMap:
                name: ${COMPONENT_NAME}-conf
                defaultMode: 420
            - name: ${COMPONENT_NAME}-upstream
              configMap:
                name: ${COMPONENT_NAME}-upstream
                defaultMode: 420
          containers:
            - name: ${COMPONENT_NAME}
              # Below Immage url must be changed as per gold cluster image stream
              image: >-
                image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-tools/${COMPONENT_NAME}:latest
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 8443
                  protocol: TCP
               resources:
                limits:
                  cpu: 50m
                  memory: 200Mi
                requests:
                  cpu: 50m
                  memory: 100Mi
              volumeMounts:
                - name: ${COMPONENT_NAME}-conf
                  readOnly: true
                  mountPath: /opt/app-root/etc/nginx.default.d/
                - name: ${COMPONENT_NAME}-upstream
                  readOnly: true
                  mountPath: /opt/app-root/etc/nginx.d
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst

  - kind: Service
    apiVersion: v1
    metadata:
      name: ${COMPONENT_NAME}
      namespace: ${OC_NAMESPACE}-${OC_ENV}
    spec:
      ports:
        - name: 8080-tcp
          protocol: TCP
          port: 8080
          targetPort: 8080
      selector:
        name: ${COMPONENT_NAME}
        deploymentconfig: ${COMPONENT_NAME}
      type: ClusterIP
      sessionAffinity: None

  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: ${COMPONENT_NAME}
      namespace: ${OC_NAMESPACE}-${OC_ENV}
    annotations:
      # if we do not use sticky-session, disable_cookies needs to be true
      haproxy.router.openshift.io/disable_cookies: "true"
      # balance algorithm
      haproxy.router.openshift.io/balance: roundrobin
    spec:
      # Below value must be changed as per gold cluster certificate/DNS
      host: ${COMPONENT_NAME}-${OC_NAMESPACE}-${OC_ENV}.${DNS}
      to:
        kind: Service
        name: ${COMPONENT_NAME}
        weight: 100
      port:
        targetPort: 8080-tcp
      tls:
        termination: edge
        certificate: '${SSL_Certificate}'
        key: '${SSL_PrivateKey}'
        caCertificate: '${CA_CertificateChain}'
        insecureEdgeTerminationPolicy: None
      wildcardPolicy: None
